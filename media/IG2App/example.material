//------Materiales, luces y sombras:
material stonesMaterial
{
    technique
    {
        pass
        {
            texture_unit
            {
                texture BeachStones.jpg
            }
        }
    }
}

material orangeMaterial
{
    technique
    {
        pass
        {
           diffuse 1.0 0.5 0.0 1.0
        }
    }
}

material waterAnimMaterial
{
    technique
    {
        pass
        {
            texture_unit
            {
                texture water00.jpg
                scroll_anim -0.1 0.0 
            }
        }
    }
}

material frostOrangeSphere
{
 technique
    {
        pass
        {
            texture_unit
            {
                texture frost.png
                env_map spherical
                colour_op modulate
            }
            diffuse 1.0 0.5 0.0
        }
    }
}

//------Sistemas de particulas.
material example/esferaSmile{
    technique {
		pass {
			texture_unit {
				texture spotlight_image.png
				env_map spherical 
	    	}
		}
    }
}

material example/panel{
	technique {
		pass {
			lighting off
			texture_unit {
				texture 10points.png
				tex_address_mode clamp
			}
		}
	}
}

material smokeMaterial
{
    technique
    {
        pass 
        {
            lighting off
            scene_blend alpha_blend
            depth_write off
            // El tex_addres_mode dice lo que aparece en la textura cuando se pasa del [0, 1]. Clamp van al borde mas cercano. Wrap (defecto) repiten la textura. Mirror refleja.
            texture_unit
            {
                texture smoke.png
                tex_address_mode clamp
            }
        }
    }
}

//------Multitexturas:

material waterLight
{
    technique
    {
        pass 
        {
            texture_unit
            {
                texture water01.jpg
                colour_op modulate
            } 
            // Add tiende a blando en las multitexturas.
            texture_unit
            {
                texture lightMap.jpg
                colour_op add
            }
        }
    }
}

material waterDark
{
    technique
    {
        pass 
        {
            texture_unit
            {
                texture water01.jpg
                colour_op modulate
            } 
            // Modulate tiende a negro en las multitexturas.
            texture_unit
            {
                texture lightMap.jpg
                colour_op modulate
            }
        }
    }
}

material beach
{
    technique
    {
        pass 
        {
            // Textura base de tierra.
            texture_unit
            {
                texture dirt.jpg
                colour_op modulate
            }
            // Mezcla el agua con el componente alpha.
            texture_unit
            {
                texture Material_alpha_blend.png
                colour_op alpha_blend
            }
            // Mezcla el agua con lo anterior. src_texture es la de ese texture_unit y src:current es la textura general hasta ahora.
            texture_unit
            {
                texture water01.jpg
                colour_op_ex blend_current_alpha src_texture src_current
            } 
        }
    }
}

material skyPlane
{
    technique
    {
        pass 
        {
            texture_unit
            {
                texture spaceSky.jpg
            }
        }
    }
}

//------Shaders:
//-----------------------ORANGE_SHADER---------------------------------------------------

vertex_program orangeShaderVS glsl
{
    source orangeShaderVS.glsl
    default_params
    {
        // Le pasamos la matriz de proyeeccion.
        param_named_auto modelViewProjMat worldviewproj_matrix 
    }
}

fragment_program orangeShaderFS glsl
{
    source orangeShaderFS.glsl
    default_params
    {

    }
}

material orageShader
{

    technique
    {
        pass
        {
            vertex_program_ref orangeShaderVS {}
            fragment_program_ref orangeShaderFS {}
        }
    }
}

//-----------------------SKY_SHADER---------------------------------------------------

vertex_program skyPlaneShaderVS glsl
{
    source skyPlaneShaderVS.glsl
    default_params
    {
        // Le pasamos la matriz de proyeeccion.
        param_named_auto modelViewProjMat worldviewproj_matrix 
    }
}

fragment_program skyPlaneShaderFS glsl
{
    source skyPlaneShaderFS.glsl
    default_params
    {
        // Le pasamos la primera textura.
        param_named spaceSkyTexture int 0
        // Le pasamos la segunda textura.
        param_named lightMapTexture int 1
        // Le pasamos la luz ambiente para distinta claridad/oscuridad de la textura.
        param_named intLuzAmb float 0.5
    }
}

material skyPlaneShader
{
    technique
    {
        pass
        {
            vertex_program_ref skyPlaneShaderVS {}
            fragment_program_ref skyPlaneShaderFS {}

            texture_unit
            {
				texture spaceSky.jpg
				tex_address_mode clamp
				filtering bilinear
			}
			texture_unit
            {
				texture lightMap.jpg
				tex_address_mode wrap
				colour_op modulate
			}
        }
    }
}

//-----------------------SPHERE_SHADER---------------------------------------------------

vertex_program checkerShaderVS glsl
{
    source checkerShaderVS.glsl
    default_params
    {
        // Le pasamos la matriz de proyeeccion.
        param_named_auto modelViewProjMat worldviewproj_matrix 
    }
}

fragment_program checkerShaderFS glsl
{
    source checkerShaderFS.glsl
    default_params
    {
        // Le pasamos la primera textura.
        param_named checkerTexture int 0
        // Le pasamos la segunda textura.
        param_named corrosionTexture int 1
        // Le pasamos la segunda textura.
        param_named bumpyMetalTexture int 2
    }
}

material checkerShader
{
    technique
    {
        pass
        {
            vertex_program_ref checkerShaderVS {}
            fragment_program_ref checkerShaderFS {}

            texture_unit
            {
				texture checker.png
				tex_address_mode clamp
				filtering bilinear
			}
			texture_unit
            {
				texture corrosion.jpg
				tex_address_mode clamp
				colour_op modulate
			}
            texture_unit
            {
				texture BumpyMetal.jpg
				tex_address_mode clamp
				colour_op modulate
			}
        }
    }
}

//-----------------------EMPTY_SHADER---------------------------------------------------

vertex_program emptyShaderVS glsl
{
    source emptyShaderVS.glsl
    default_params
    {
        // Le pasamos la matriz de proyeeccion.
        param_named_auto modelViewProjMat worldviewproj_matrix 
    }
}

fragment_program emptyShaderFS glsl
{
    source emptyShaderFS.glsl
    default_params
    {
        // Le pasamos la primera textura.
        param_named checkerTexture int 0
        // Le pasamos la segunda textura.
        param_named corrosionTexture int 1
    }
}

material emptyShader
{
    technique
    {
        pass
        {
            vertex_program_ref emptyShaderVS {}
            fragment_program_ref emptyShaderFS {}

            // Importante el culling.
            cull_hardware none
			cull_software none

            texture_unit
            {
				texture checker.png
				tex_address_mode clamp
				filtering bilinear
			}
			texture_unit
            {
				texture corrosion.jpg
				tex_address_mode clamp
				colour_op modulate
			}
        }
    }
}

//-----------------------WAVES_SHADER---------------------------------------------------

vertex_program wavesVS glsl
{
    source wavesVS.glsl
    default_params
    {
        // Le pasamos la matriz de proyeeccion.
        param_named_auto modelViewProjMat worldviewproj_matrix 
        // Le pasamos el tiempo.
        param_named_auto sinTime sintime_0_2pi 100
    }
}

fragment_program wavesFS glsl
{
    source wavesFS.glsl
    default_params
    {
        // Le pasamos la textura.
        param_named wavesTexture int 0
    }
}

material wavesShader
{
    technique
    {
        pass
        {
            vertex_program_ref wavesVS {}
            fragment_program_ref wavesFS {}

            texture_unit
            {
                texture water00.jpg
                // Sobra porque el shader de vertices lo anula.
                //scroll_anim -0.5 0.0 
            }
        }
    }
}

//-----------------------CORROSION_SHADER---------------------------------------------------

vertex_program corrosionShaderVS glsl
{
    source corrosionShaderVS.glsl
    default_params
    {
        // Le pasamos la matriz de proyeeccion.
        param_named_auto modelViewProjMat worldviewproj_matrix 
    }
}

fragment_program corrosionShaderFS glsl
{
    source corrosionShaderFS.glsl
    default_params
    {
        // Le pasamos la textura de la corrosion.
        param_named corrosionTexture int 0
        // Le pasamos la textura de la tierra.
        param_named dirtTexture int 1
        // Le pasamos la textura del metal.
        param_named bumpyMetalTexture int 2
        // Le pasamos el flipping.
        param_named_auto flipping render_target_flipping
    }
}

material corrosionShader
{
    technique
    {
        pass
        {
            vertex_program_ref corrosionShaderVS {}
            fragment_program_ref corrosionShaderFS {}

            // Importante el culling.
            cull_hardware none 
            cull_software none 

            texture_unit
            {
                texture corrosion.jpg
            }
            texture_unit
            {
                texture dirt.jpg
            }
            texture_unit
            {
                texture BumpyMetal.jpg
            }
        }
    }
}